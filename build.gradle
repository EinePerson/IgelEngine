import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java'
}

group = 'de.igelstudios'
version = project.game_version

switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                : "natives-linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
        break
    case OperatingSystem.WINDOWS:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.contains("64")
                ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                : "natives-windows-x86"
        break
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform("org.junit:junit-bom:$junit_version")
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation "io.netty:netty-all:$netty_version"
    implementation "ch.qos.logback:logback-classic:$slf4j_version"

    implementation platform("org.lwjgl:lwjgl-bom:$lwjgl_version")
    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-nfd"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-shaderc"
    implementation "org.lwjgl:lwjgl-stb"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nfd::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-shaderc::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    implementation "org.joml:joml:$joml_version"
}



test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes(
                'Main-Class': 'de.igelstudios.ClientMain'
        )
    }
}

/*tasks.register('compileShaders') {
    inputs.dir "src/main/shader"
    outputs.dir "src/main/resources/shader"
    doLast {
        fileTree("src/main/shader").each { shaderFile ->
            def spvFile = file("${projectDir}/src/main/resources/shader/${shaderFile.name}.spv")
            if (!spvFile.exists() || shaderFile.lastModified() > spvFile.lastModified()) {
                exec {
                    workingDir file("${projectDir}/src/main/shader")
                    commandLine "glslc", "${shaderFile}", "-o", "${spvFile}"
                }
            }
        }
    }
}

processResources.dependsOn compileShaders*/