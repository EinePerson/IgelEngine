import org.codehaus.groovy.runtime.GStringImpl
import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java'
}

sourceCompatibility = project.java_version
targetCompatibility = project.java_version
group = 'de.igelstudios'
version = "v$game_version"

switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                : "natives-linux" as GStringImpl
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos" as GStringImpl
        break
    case OperatingSystem.WINDOWS:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.contains("64")
                ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                : "natives-windows-x86" as GStringImpl
        break
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "com.google.code.gson:gson:$gson_version"
    testImplementation platform("org.junit:junit-bom:$junit_version")
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation "io.netty:netty-all:$netty_version"
    implementation "ch.qos.logback:logback-classic:$slf4j_version"

    implementation platform("org.lwjgl:lwjgl-bom:$lwjgl_version")
    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-nfd"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-shaderc"
    implementation "org.lwjgl:lwjgl-stb"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nfd::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-shaderc::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    implementation "org.joml:joml:$joml_version"
}



test {
    useJUnitPlatform()
}

jar {
    /*manifest {
        attributes(
                'Main-Class': 'de.igelstudios.ClientMain'
        )
    }*/
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

tasks.register('fatJar', Jar) {
    manifest.from jar.manifest
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}


tasks.withType(Jar).all {
    duplicatesStrategy 'exclude'
}

artifacts {
    archives fatJar
}
